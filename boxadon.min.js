/* Boxadon by @dmtaub - contact for full source or collaboration opportunities */
var boxadon=function(e){"use strict"
function t(e){var t=Object.create(null)
return e&&Object.keys(e).forEach((function(s){if("default"!==s){var i=Object.getOwnPropertyDescriptor(e,s)
Object.defineProperty(t,s,i.get?i:{enumerable:!0,get:function(){return e[s]}})}})),t.default=e,Object.freeze(t)}var s=t(e)
class i extends s.Scene{constructor(){super({key:"TitleScene"}),this.options=["Easy Mode","Normal Mode","Options"],this.defaultTextStyle={fontSize:"32px",fill:"#bbb"},this.highlightedTextStyle={fontSize:"32px",fill:"#fff"}}create(){this.selectedOptionIndex=0,this.optionButtons=[],localStorage.countdownDuration?(console.log("Countdown duration loaded from localStorage, set to",localStorage.countdownDuration," ms"),this.countdownDuration=parseInt(localStorage.countdownDuration)):this.countdownDuration=5e3,this.playerIcon=null,this.countdownTimer=null,this.cameras.main.setBackgroundColor("#008000"),this.add.text(400,100,"Game Title",{fontSize:"64px",fill:"#bbb"}).setOrigin(.5)
this.options.forEach(((e,t)=>{let s=this.add.text(450,200+100*t,e,{fontSize:"32px",fill:0==t?"#fff":"#bbb"}).setOrigin(0,.5).setInteractive()
s.on("pointerdown",(()=>{this.selectedOptionIndex=t,this.startSelectedOption()})),s.on("pointerover",(()=>{this.selectedOptionIndex=t,this.updatePlayerIconPosition(),this.clearCountdownTimer(),s.setStyle(this.highlightedTextStyle)})),this.optionButtons.push(s)}))
let e=this.game.registry.get("playerColor")
e=void 0===e?16711680:e,this.playerIcon=this.add.rectangle(400,200+100*this.selectedOptionIndex,32,48,e).setOrigin(.5),this.countdownText=this.add.text(400,550,"",this.defaultTextStyle).setOrigin(.5),this.cursors=this.input.keyboard.createCursorKeys(),this.enterKey=this.input.keyboard.addKey(s.Input.Keyboard.KeyCodes.ENTER),this.resetCountdownTimer()}update(e,t){s.Input.Keyboard.JustDown(this.cursors.up)?(this.selectedOptionIndex=(this.selectedOptionIndex+this.options.length-1)%this.options.length,this.updatePlayerIconPosition(),this.clearCountdownTimer()):s.Input.Keyboard.JustDown(this.cursors.down)?(this.selectedOptionIndex=(this.selectedOptionIndex+1)%this.options.length,this.updatePlayerIconPosition(),this.clearCountdownTimer()):s.Input.Keyboard.JustDown(this.enterKey)&&this.startSelectedOption(),this.countdownTimer&&(this.countdownRemaining=this.countdownDuration-this.countdownTimer.getElapsed()),this.countdownText&&this.countdownText.setText("Starting in "+Math.ceil(this.countdownRemaining/1e3)+" seconds...")}updatePlayerIconPosition(){let e=this.game.registry.get("playerColor")
e=void 0===e?16711680:e,this.playerIcon.setFillStyle(e),this.playerIcon.y=200+100*this.selectedOptionIndex,this.optionButtons.forEach(((e,t)=>{t===this.selectedOptionIndex?e.setStyle(this.highlightedTextStyle):e.setStyle(this.defaultTextStyle)}))}startSelectedOption(){switch(this.selectedOptionIndex){case 0:this.scene.start("MainScene",{level:1,gameMode:"easy"})
break
case 1:this.scene.start("MainScene",{level:1,gameMode:"normal"})
break
case 2:this.scene.start("OptionsScene")}}resetCountdownTimer(){this.countdownTimer&&this.countdownTimer.remove(),this.countdownTimer=this.time.delayedCall(this.countdownDuration,(()=>{this.selectedOptionIndex=0,this.startSelectedOption()}),[],this)}clearCountdownTimer(){this.countdownTimer&&(this.countdownTimer.remove(),this.countdownTimer=null),this.countdownText&&(this.countdownText.setText(""),this.countdownText=null)}}class o extends s.Scene{constructor(){super({key:"OptionsScene"})}create(){this.selectedColorIndex=0,this.colorButtons=[],this.defaultButtonStyle={lineWidth:2,strokeStyle:16777215},this.selectedButtonStyle={lineWidth:4,strokeStyle:16776960},this.cameras.main.setBackgroundColor("#000000"),this.add.text(400,50,"Options",{fontSize:"48px",fill:"#fff"}).setOrigin(.5),this.add.text(400,100,"Select Player Color",{fontSize:"24px",fill:"#fff"}).setOrigin(.5),this.colors=[{color:16711680,label:"Red",x:150,y:200},{color:65280,label:"Green",x:300,y:200},{color:255,label:"Blue",x:450,y:200},{color:16776960,label:"Yellow",x:600,y:200},{color:16711935,label:"Magenta",x:150,y:350},{color:65535,label:"Cyan",x:300,y:350},{color:16777215,label:"White",x:450,y:350},{color:0,label:"Black",x:600,y:350}],this.colors.forEach(((e,t)=>{let s=this.add.rectangle(e.x,e.y,100,100,e.color).setInteractive()
s.on("pointerdown",(()=>{this.game.registry.set("playerColor",e.color),this.scene.start("TitleScene")})),s.on("pointerover",(()=>{this.selectedColorIndex=t,this.updateColorSelection()})),s.setStrokeStyle(this.defaultButtonStyle.lineWidth,this.defaultButtonStyle.strokeStyle),this.colorButtons.push(s)})),this.cancelButton=this.add.text(400,500,"Cancel",{fontSize:"32px",fill:"#888"}).setOrigin(.5).setInteractive(),this.cancelButton.on("pointerdown",(()=>{this.scene.start("TitleScene")})),this.cancelButton.on("pointerover",(()=>{this.cancelButton.setStyle({fill:"#fff"}),this.selectedColorIndex=-1,this.updateColorSelection()})),this.cancelButton.on("pointerout",(()=>{this.cancelButton.setStyle({fill:"#888"})})),this.cursors=this.input.keyboard.createCursorKeys(),this.enterKey=this.input.keyboard.addKey(s.Input.Keyboard.KeyCodes.ENTER),this.escapeKey=this.input.keyboard.addKey(s.Input.Keyboard.KeyCodes.ESC),this.updateColorSelection(),this.input.on("pointerdown",((e,t)=>{t.length})),this.events.on("shutdown",this.shutdown,this)}update(){if(s.Input.Keyboard.JustDown(this.cursors.left))-1===this.selectedColorIndex?this.selectedColorIndex=this.colorButtons.length-1:this.selectedColorIndex%4>0?this.selectedColorIndex-=1:this.selectedColorIndex+=3,this.updateColorSelection()
else if(s.Input.Keyboard.JustDown(this.cursors.right))-1===this.selectedColorIndex?this.selectedColorIndex=0:this.selectedColorIndex%4<3?this.selectedColorIndex+=1:this.selectedColorIndex-=3,this.updateColorSelection()
else if(s.Input.Keyboard.JustDown(this.cursors.up))-1===this.selectedColorIndex?this.selectedColorIndex=4:this.selectedColorIndex-4>=0?this.selectedColorIndex-=4:this.selectedColorIndex=-1,this.updateColorSelection()
else if(s.Input.Keyboard.JustDown(this.cursors.down))-1===this.selectedColorIndex||(this.selectedColorIndex+4<this.colorButtons.length?this.selectedColorIndex+=4:this.selectedColorIndex=-1),this.updateColorSelection()
else if(s.Input.Keyboard.JustDown(this.enterKey))if(-1===this.selectedColorIndex)this.scene.start("TitleScene")
else{const e=this.colors[this.selectedColorIndex]
this.game.registry.set("playerColor",e.color),this.scene.start("TitleScene")}else s.Input.Keyboard.JustDown(this.escapeKey)&&this.scene.start("TitleScene")}updateColorSelection(){this.colorButtons.forEach(((e,t)=>{t===this.selectedColorIndex?e.setStrokeStyle(this.selectedButtonStyle.lineWidth,this.selectedButtonStyle.strokeStyle):e.setStrokeStyle(this.defaultButtonStyle.lineWidth,this.defaultButtonStyle.strokeStyle)}))}shutdown(){this.input.keyboard.shutdown(),this.input.off("pointerdown"),this.events.off("shutdown",this.shutdown,this)}}class n{constructor(e,t={}){this.scene=e,this.keys=t.keys||["LEFT","RIGHT","UP","DOWN","SPACE","SHIFT"],this.keySize=t.keySize||{width:100,height:50},this.margin=t.margin||10,this.position=t.position||{x:50,y:568},this.keyPositions=t.keyPositions||{LEFT:{x:0,y:0},RIGHT:{x:1,y:0},UP:{x:6.25,y:0},DOWN:{x:2,y:0},SPACE:{x:0,y:0,hidden:!0},SHIFT:{x:5.25,y:0}},this.buttons={},this.virtualKeys={left:!1,right:!1,up:!1,down:!1,space:!1,shift:!1},this.createKeyboard(),this.initializeVirtualKeyListeners(),setInterval((()=>{this.scene.children.bringToTop(r)}),500)}initializeVirtualKeyListeners(){this.scene.input.addPointer(3),Object.keys(this.virtualKeys).forEach((e=>{const t=this.buttons[e.toUpperCase()].button
t&&t.on("pointerdown",(()=>this.virtualKeys[e]=!0)).on("pointerup",(()=>this.virtualKeys[e]=!1)).on("pointerout",(()=>this.virtualKeys[e]=!1))})),document.querySelector("canvas").addEventListener("mouseleave",(()=>{Object.keys(this.virtualKeys).forEach((e=>{this.virtualKeys[e]=!1}))}))}createKeyboard(){const{x:e,y:t}=this.position
let s=e,i=t
this.keys.forEach(((o,n)=>{if(this.keyPositions[o]){if(this.keyPositions[o].hidden)return void(this.buttons[o]={button:null,label:null})
s=e+this.keyPositions[o].x*(this.keySize.width+this.margin),i=t-this.keyPositions[o].y*(this.keySize.height+this.margin)}else s=e+n*(this.keySize.width+this.margin),s>this.scene.sys.game.config.width-this.keySize.width?(s=e,i=t-this.keySize.height+this.margin):i=t
const r=this.scene.add.rectangle(s,i,this.keySize.width,this.keySize.height,6710886)
r.setInteractive()
const a=this.scene.add.text(s,i,o,{fontSize:"16px",fill:"#ffffff"}).setOrigin(.5)
this.buttons[o]={button:r,label:a}}))}destroy(){Object.values(this.buttons).forEach((({button:e,label:t})=>{e.destroy(),t.destroy()})),this.buttons={}}}class a{constructor(e,t){this.scene=e,this.cursors=this.scene.input.keyboard.createCursorKeys(),this.wasd=this.scene.input.keyboard.addKeys("W,S,A,D"),this.debugKey=this.scene.input.keyboard.addKey(s.Input.Keyboard.KeyCodes.ZERO),this.pauseKey=this.scene.input.keyboard.addKey(s.Input.Keyboard.KeyCodes.P),/Android|iPhone|iPad|iPod|Opera Mini|IEMobile|WPDesktop/i.test(navigator.userAgent)||"ontouchstart"in window&&navigator.maxTouchPoints>0?this.virtualKeyboard=new n(e,{}):this.virtualKeyboard={virtualKeys:{}},this.shiftKey=this.scene.input.keyboard.addKey(s.Input.Keyboard.KeyCodes.SHIFT)}isLeftPressed(){return this.cursors.left.isDown||this.wasd.A.isDown||this.virtualKeyboard.virtualKeys.left}isRightPressed(){return this.cursors.right.isDown||this.wasd.D.isDown||this.virtualKeyboard.virtualKeys.right}isUpPressed(){return this.cursors.up.isDown||this.wasd.W.isDown||this.virtualKeyboard.virtualKeys.up}isDownPressed(){return this.cursors.down.isDown||this.wasd.S.isDown||this.virtualKeyboard.virtualKeys.down}isSpacePressed(){return this.cursors.space.isDown||this.virtualKeyboard.virtualKeys.space}isShiftPressed(){const e=s.Input.Keyboard.JustDown(this.shiftKey)||this.virtualKeyboard.virtualKeys.shift
return this.virtualKeyboard.virtualKeys.shift=!1,e}}class h{constructor(e={}){this.starIncreasePerLevel=e.starIncreasePerLevel||2,this.spikeDamage=e.spikeDamage||.5,this.numberOfBalls=e.numberOfBalls||22,this.game={getProgression:function(e){if("easy"===e)return[{levelType:"StarLevel",levelIndexInType:1},{levelType:"FloatingStarLevel",levelIndexInType:1},{levelType:"BallLevel",levelIndexInType:1}]
{let e=[],t=1
for(let s=0;s<10;s++)e.push({levelType:"StarLevel",levelIndexInType:t++})
t=1
for(let s=0;s<5;s++)e.push({levelType:"FloatingStarLevel",levelIndexInType:t++})
return e.push({levelType:"BallLevel",levelIndexInType:1}),e}}}}getStarLevelOptions(e){return{starIncreasePerLevel:this.starIncreasePerLevel,spikeDamage:this.spikeDamage,levelIndexInType:e}}getFloatingStarLevelOptions(e){return{levelIndexInType:e}}getBallLevelOptions(e){return{numberOfBalls:this.numberOfBalls,elasticity:1}}}class l{constructor(e=1,t={}){this.level=e,this.weightSlowFactor=t.weightSlowFactor||.05,this.minPlayerSpeed=t.minPlayerSpeed||.5,this.maxPlayerSpeed=t.maxPlayerSpeed||1.2,this.weightJumpFactor=t.weightJumpFactor||.01,this.minPlayerJumpSpeed=t.minPlayerJumpSpeed||.8,this.maxPlayerJumpSpeed=t.maxPlayerJumpSpeed||2,this.maxJumpTime=t.maxJumpTime||300,this.jumpSpeed=t.jumpSpeed||-330,this.gravityY=t.gravityY||300,this.defaultItemBounce=t.defaultItemBounce||{x:.8,y:.8}}}class c{constructor(e,t={}){if(this.scene=e,this.size=t.size||{width:10,height:10},this.shape=t.shape||"triangle",this.speed=t.speed||500,this.color=t.color||16776960,this.cooldown=t.cooldown||200,this.recoilForce=t.recoilForce||100,this.textureKey="projectile_"+this.shape+"_"+this.color.toString(16),!this.scene.textures.exists(this.textureKey)){let e=this.scene.add.graphics({fillStyle:{color:this.color}})
"triangle"===this.shape?e.fillTriangle(0,this.size.height,this.size.width/2,0,this.size.width,this.size.height):"circle"===this.shape&&e.fillCircle(this.size.width/2,this.size.height/2,this.size.width/2),e.generateTexture(this.textureKey,this.size.width,this.size.height),e.destroy()}}}class d{constructor(){this.items={},this.totalWeight=0}addItem(e,t=1,s=0){this.items[e]?this.items[e].quantity+=t:this.items[e]={quantity:t,weight:s},this.totalWeight+=s*t}removeItem(e,t=1){this.items[e]&&(this.items[e].quantity-=t,this.totalWeight-=this.items[e].weight*t,this.items[e].quantity<=0&&delete this.items[e])}}class p{constructor(e,t={}){if(e instanceof Array==!1)throw new Error("AsciiMap must be an array of strings.")
const s=e.findIndex((e=>e.match(/^-+$/)))
this.asciiMap=s>-1?e.slice(s+1):e,this.levelWidth=this.asciiMap[0].length
for(let e=1;e<this.asciiMap.length;e++)this.asciiMap[e].length>this.levelWidth&&(this.levelWidth=this.asciiMap[e].length)
if(t.repeatCount&&t.repeatCount>0){for(let e=0;e<this.asciiMap.length;e++)this.asciiMap[e]=this.repeatRow(this.asciiMap[e],t.repeatCount)
this.levelWidth*=t.repeatCount}this.tileSize=32,this.levelHeight=this.asciiMap.length,this.spikeTines=t.spikeTines||4}getLevelDimensions(){return{width:this.levelWidth*this.tileSize,height:this.levelHeight*this.tileSize}}repeatRow(e,t){return e.length<this.levelWidth&&(e=e.padEnd(this.levelWidth,".")),e.repeat(Math.ceil(t))}parse(){const e=[],t=[],s=[],i=[],o=[],n={w:(t,s)=>{e.push(this.createWall(t,s))},p:(e,s)=>{t.push(this.createPlatform(e,s))},s:(e,t)=>{s.push(this.createSpike(e,t))},e:(e,t)=>{i.push(this.createEnemy(e,t,"e"))},E:(e,t)=>{i.push(this.createEnemy(e,t,"E"))},h:(e,t)=>{o.push(this.createItem(e,t,"h"))},H:(e,t)=>{o.push(this.createItem(e,t,"H"))}}
for(let e=0;e<this.levelHeight;e++){const t=this.asciiMap[e]
for(let s=0;s<this.levelWidth;s++){const i=n[t[s]]
if(i){i(s*this.tileSize,e*this.tileSize)}}}return{wallData:e,platformData:t,spikeData:s,enemyData:i,itemData:o}}createWall(e,t){return{x:e+this.tileSize/2,y:t+this.tileSize/2,width:this.tileSize,height:this.tileSize,color:9127187}}createPlatform(e,t){return{x:e+this.tileSize/2,y:t+this.tileSize/2,width:this.tileSize,height:this.tileSize/2,color:8388736}}createSpike(e,t){return{x:e+this.tileSize/2,y:t+this.tileSize/2,width:this.tileSize,height:this.tileSize,tines:this.spikeTines,color:8421504}}createEnemy(e,t,s){return{x:e+this.tileSize/2,y:t+this.tileSize/2,type:s}}createItem(e,t,s){return{x:e+this.tileSize/2,y:t+this.tileSize/2,type:s}}}let u=0
class y{constructor(e,t,s,i){this.scene=e,this.player=s,this.level=i,this.debugInputs={}
const o={id:u++,type:t.type,x:t.x,y:t.y,initialX:t.x,initialY:t.y,color:"e"===t.type?16753920:16711680,shape:"e"===t.type?"oval":"diamond",damage:"e"===t.type?1:2,gravity:"e"===t.type,collidesWithLevel:"e"===t.type,direction:1,senseDistance:t.senseDistance||("e"===t.type?150:220),speed:t.speed||("e"===t.type?50:100),maxHealth:"e"===t.type?2:3,health:"e"===t.type?2:3,patrolDistance:"e"===t.type?200:210,jumpHeight:t.jumpHeight||10,jumpSpeed:t.jumpSpeed||-300,jumpCooldown:1e3,lastJumpTime:0,resetPatrol:!1,chaseDistance:t.chaseDistance||300,returnSpeed:t.returnSpeed||100,tolerance:5,state:"bobbing",bobAmplitude:20},n=["x","y"]
this.props=new Proxy(o,{get:(e,t)=>e[t],set:(e,t,s)=>{if(n.includes(t))return e[t]=s,!0
const i=e[t]
return i!==s&&(e[t]=s,this.handlePropChange(t,i,s)),!0}}),this.createSprite(),this.props.collidesWithLevel&&(e.physics.add.collider(this.sprite,i.walls),e.physics.add.collider(this.sprite,i.platforms),e.physics.add.collider(this.sprite,i.spikes)),e.physics.add.overlap(this.sprite,s.sprite,this.hitPlayer,null,this),e.physics.add.overlap(this.sprite,s.projectiles,this.hitByProjectile,null,this),this.sprite.setData("instance",this)}handlePropChange(e,t,s){switch(e){case"x":this.sprite&&(this.sprite.x=s)
break
case"y":this.sprite&&(this.sprite.y=s)
break
case"color":this.sprite&&this.sprite.isFilled&&this.sprite.setFillStyle(s,1)
break
case"gravity":this.sprite&&this.sprite.body&&(this.sprite.body.setAllowGravity(s),this.sprite.body.allowGravity=s)
break
case"collidesWithLevel":this.scene&&this.sprite&&s&&(this.scene.physics.add.collider(this.sprite,this.level.walls),this.scene.physics.add.collider(this.sprite,this.level.platforms),this.scene.physics.add.collider(this.sprite,this.level.spikes))
break
case"shape":s!==t&&(this.sprite&&this.sprite.destroy(),this.createSprite())
break
case"health":s<=0&&this.sprite&&this.sprite.destroy()}if(this.debugInputs&&this.debugInputs[e]){["x","y"].includes(e)||console.log(`[Enemy #${this.props.id}] Updating input for ${e} to ${s}`)
const t=this.debugInputs[e]
"checkbox"===t.type?t.checked=!!s:"color"===t.type?t.value="#"+s.toString(16).padStart(6,"0"):t.value=s}}createSprite(){if("oval"===this.props.shape)this.sprite=this.scene.add.ellipse(this.props.x,this.props.y,30,40,this.props.color)
else if("diamond"===this.props.shape){const e=30,t=40,s=[0,t/2,e/2,0,e,t/2,e/2,t]
this.sprite=this.scene.add.polygon(this.props.x,this.props.y,s,this.props.color)}this.scene.physics.add.existing(this.sprite),this.sprite.body.setAllowGravity(this.props.gravity),this.sprite.body.allowGravity=this.props.gravity,this.sprite.body.setCollideWorldBounds(this.props.collidesWithLevel),this.sprite.body.onWorldBounds=this.props.collidesWithLevel}init(){this.sprite&&this.sprite.body&&(this.sprite.body.setCollideWorldBounds(this.props.collidesWithLevel),this.sprite.body.onWorldBounds=this.props.collidesWithLevel,this.sprite.body.setAllowGravity(this.props.gravity),this.sprite.body.allowGravity=this.props.gravity)}update(e,t){"E"===this.props.type?this.updateFlyingTypeEnemy(e,t):"e"===this.props.type&&this.updateWalkingTypeEnemy(e,t),this.scene.physics.world.isPaused||(this.debugInputs.x&&(this.props.x=this.sprite.x,this.debugInputs.x.value=this.sprite.x.toFixed(1)),this.debugInputs.y&&(this.props.y=this.sprite.y,this.debugInputs.y.value=this.sprite.y.toFixed(1)))}updateFlyingTypeEnemy(e,t){const i=s.Math.Distance.Between(this.sprite.x,this.sprite.y,this.player.sprite.x,this.player.sprite.y)
switch(this.props.state){case"bobbing":this.props.initialY,Math.cos(this.scene.time.now/500),this.props.bobAmplitude,this.sprite.x>=this.props.initialX+this.props.patrolDistance/2?(this.props.direction=-1,this.sprite.body.setVelocityY(0),this.sprite.y=this.props.initialY):this.sprite.x<=this.props.initialX-this.props.patrolDistance/2&&(this.props.direction=1,this.sprite.body.setVelocityY(0),this.sprite.y=this.props.initialY),this.sprite.body.setVelocityX(50*this.props.direction),i<=this.props.senseDistance&&(this.props.state="chasing")
break
case"chasing":this.scene.physics.moveToObject(this.sprite,this.player.sprite,this.props.speed),i>this.props.chaseDistance&&(this.props.state="returning")
break
case"returning":s.Math.Distance.Between(this.sprite.x,this.sprite.y,this.props.initialX,this.props.initialY)>this.props.tolerance?this.scene.physics.moveTo(this.sprite,this.props.initialX,this.props.initialY,this.props.returnSpeed):(this.sprite.body.setVelocity(0,0),this.props.direction=1,this.sprite.x=this.props.initialX,this.sprite.y=this.props.initialY,this.props.state="bobbing")
break}}updateWalkingTypeEnemy(e,t){if(s.Math.Distance.Between(this.sprite.x,this.sprite.y,this.player.sprite.x,this.player.sprite.y)<=this.props.senseDistance){if(this.props.resetPatrol=!0,this.sprite.x<this.player.sprite.x?(this.sprite.body.setVelocityX(this.props.speed),this.props.direction=1):this.sprite.x>this.player.sprite.x?(this.sprite.body.setVelocityX(-this.props.speed),this.props.direction=-1):this.sprite.body.setVelocityX(0),this.props.jumpHeight>0){const e=this.player.sprite.y-this.sprite.y
Math.abs(this.player.sprite.x-this.sprite.x)<100&&e<-50&&e>-200&&this.scene.time.now-this.props.lastJumpTime>this.props.jumpCooldown&&this.sprite.body.onFloor()&&(this.sprite.body.setVelocityY(this.props.jumpSpeed),this.props.lastJumpTime=this.scene.time.now)}}else{const e=s.Math.Within(this.props.initialX,this.sprite.x,1),t=s.Math.Within(this.props.initialY,this.sprite.y,1)
this.props.resetPatrol&&(e||t)&&(this.props.resetPatrol=!1,this.props.initialX=this.sprite.x,this.props.initialY=this.sprite.y),this.sprite.x>=this.props.initialX+this.props.patrolDistance/2?this.props.direction=-1:this.sprite.x<=this.props.initialX-this.props.patrolDistance/2&&(this.props.direction=1),this.sprite.body.blocked.left?this.props.direction=1:this.sprite.body.blocked.right&&(this.props.direction=-1),this.sprite.body.setVelocityX(this.props.direction*this.props.speed)}}hitByProjectile(e,t){this.props.health=this.props.health-1,t.destroy(),this.props.health<=0?(e.destroy(),this.player.score+=20,this.player.scoreText.setText("Score: "+this.player.score)):this.scene.tweens.add({targets:e,duration:100,alpha:.5,yoyo:!0,repeat:0,onComplete:()=>{e.alpha=1}})}hitPlayer(e,t){this.player.takeDamage(t,e,this.props.damage)}createDebugContent(){const e=["scene","player","level","sprite","lastJumpTime","tolerance","id"],t=this.props.id,s=document.createElement("div")
s.classList.add("debug-wrapper")
const i=["id","direction","x","y"],o=["color"],n=["gravity","collidesWithLevel","collidesWithPlayer","resetPatrol"],r={speed:[0,300],senseDistance:[0,1e3],chaseDistance:[0,1e3],patrolDistance:[0,1e3],returnSpeed:[0,300],maxHealth:[1,10],health:[0,10],damage:[0,5],jumpCooldown:[250,2e3]},a={type:{E:"Flying",e:"Walking"},shape:["diamond","oval"],state:["bobbing","chasing","returning"]},h=[...o,...Object.keys(a),["x","y"],["initialX","initialY"],["jumpHeight","jumpSpeed"],...Object.keys(r),...n,"bobAmplitude"]
this.debugInputs={}
const l=s=>{if(e.includes(s))return""
const h=this.props[s],l=i.includes(s)?"disabled":""
if(o.includes(s))return`\n                    <label class="debug-color">\n                        <span>${s}:</span>\n                        <input type="color" id="enemy-${t}-${s}" value="#${h.toString(16).padStart(6,"0")}" ${l} />\n                    </label>\n                `
if(r[s]){const[e,i]=r[s]
return`\n                    <label class="debug-slider">\n                        <span>${s}:</span>\n                        <input type="range"\n                            id="enemy-${t}-${s}"\n                            value="${h}"\n                            min="${e}" max="${i}"\n                            oninput="document.getElementById('enemy-${t}-${s}-output').value = this.value"\n                            ${l}\n                        />\n                        <output id="enemy-${t}-${s}-output">${h}</output>\n                    </label>\n                `}if(a[s]){const e=a[s],i=Array.isArray(e),o=i?e:Object.keys(e)
let n=""
for(const t of o){n+=`<option value="${t}" ${h===t?"selected":""}>${i?t:e[t]}</option>`}return`\n                    <label class="debug-select">\n                        <span>${s}:</span>\n                        <select id="enemy-${t}-${s}" ${l}>\n                            ${n}\n                        </select>\n                    </label>\n                `}if(n.includes(s)){return`\n                    <label class="debug-checkbox">\n                        <span>${s}:</span>\n                        <input type="checkbox" id="enemy-${t}-${s}" ${h?"checked":""} ${l} />\n                    </label>\n                `}return`\n                    <label class="debug-text">\n                        <span>${s}:</span>\n                        <input type="text" id="enemy-${t}-${s}" value="${h}" ${l} />\n                    </label>\n                `}
let c='<div class="debug-container">'
const d=new Set
for(const e of h)if(Array.isArray(e)){const t=e
let s=""
for(const i of t)d.has(e)||i in this.props&&(d.add(i),s+=l(i))
s.length&&(c+='<div class="debug-row-group">',c+=s,c+="</div>")}else{if(d.has(e))continue
const t=e
t in this.props&&(d.add(t),c+='<div class="debug-row-single">',c+=l(t),c+="</div>")}for(const e of Object.keys(this.props))if(!d.has(e)){const t=l(e)
t.length&&(c+='<div class="debug-row-group">',c+=t,c+="</div>")}c+="</div>",c+=`\n            <div class="debug-sprite">\n                <label>Upload Spritesheet:\n                    <input type="file" id="enemy-${t}-spritesheet" accept="image/*" />\n                </label>\n                <div class="debug-container">\n                    <label>\n                        Frame Width:\n                        <input type="number" id="enemy-${t}-frame-width"\n                            value="${this.sprite?this.sprite.width:32}" />\n                    </label>\n                    <label>\n                        Frame Height:\n                        <input type="number" id="enemy-${t}-frame-height"\n                            value="${this.sprite?this.sprite.height:32}" />\n                    </label>\n                </div>\n            </div>\n        `,s.innerHTML=c
return s.querySelectorAll("input, select").forEach((e=>{const s=e.id.split("-").slice(2).join("-")
this.debugInputs[s]=e,e.addEventListener("change",(()=>{const s=e.id.split("-").slice(2).join("-")
if(!s)return void console.warn("Could not determine property name from input ID:",e.id)
if("spritesheet"===s){const t=e.files[0]
return void(t&&console.log(`Uploaded new sprite file: ${t.name}`))}if("frame-width"===s||"frame-height"===s)return void console.log(`[Enemy #${t}] Set ${s} = ${e.value}`)
let i=e.value
"checkbox"===e.type?i=e.checked:"color"===e.type?i=parseInt(i.slice(1),16):"range"===e.type?i=parseFloat(i):isNaN(i)||""===i.trim()||(i=parseFloat(i))
const o=this.props[s]
console.log(`[Enemy #${t}] Setting ${s} from "${o}" to "${i}"`),this.props[s]=i}))})),s}removeDebugContent(){this.debugInputs={}}}class m{constructor(e,t,s){this.scene=e,this.player=s,this.type=t.type,this.x=t.x,this.y=t.y,"h"===this.type?(this.healthAmount=1,this.color=65280,this.size=16):"H"===this.type&&(this.healthAmount=2,this.color=32768,this.size=24),this.createSprite(),e.physics.add.overlap(this.sprite,s.sprite,this.collectItem,null,this),this.sprite.setData("instance",this)}createSprite(){this.sprite=this.scene.add.circle(this.x,this.y,this.size/2,this.color)}collectItem(e,t){this.player.addHealth(this.healthAmount),e.destroy()}}const g=220
class w{constructor(e,t,s={}){this.scene=e,this.kinematics=t,this.levelOptions=s,this.walls=e.physics.add.staticGroup(),this.platforms=e.physics.add.staticGroup(),this.spikes=e.physics.add.staticGroup(),this.stars=e.physics.add.group(),this.enemies=e.physics.add.group(),this.items=e.physics.add.staticGroup(),this.inventory=new d
const i=new Date
this.initLevelData()
const o=new Date
console.log(`Level data init time: ${o-i}ms`),this.createEnemies(),this.createItems(),this.createWalls(),this.createPlatforms(),this.createSpikes()}initLevelData(){if(this.levelOptions.asciiMap){const e=new p(this.levelOptions.asciiMap,{spikeTines:this.levelOptions.spikeTines||1,repeatCount:this.levelOptions.sideScroll||0}),{wallData:t,platformData:s,spikeData:i,enemyData:o,itemData:n}=e.parse(),{width:r,height:a}=e.getLevelDimensions()
this.scene.cameras.main.setBounds(0,-220,r,a+g),this.scene.cameras.main.startFollow(this.scene.player.sprite),this.scene.physics.world.setBounds(0,-220,r,a+g),this.wallData=t,this.platformData=s,this.spikeData=i,this.enemyData=o,this.itemData=n}else this.wallData=[{x:400,y:568,width:800,height:64,color:2263842,name:"ground"},{x:600,y:400,width:150,height:32,color:9127187},{x:50,y:250,width:150,height:32,color:9127187},{x:750,y:220,width:150,height:32,color:9127187}],this.platformData=[{x:400,y:350,width:200,height:16,color:8388736}],this.spikeData=[{x:775,y:522,width:60,height:28,tines:15,color:8421504},{x:25,y:522,width:50,height:28,tines:15,color:8421504}],this.itemData=[],this.enemyData=[]}createEnemies(){this.enemyData.forEach((e=>{const t=new y(this.scene,e,this.scene.player,this)
this.enemies.add(t.sprite),t.init()}))}createItems(){this.itemData.forEach((e=>{const t=new m(this.scene,e,this.scene.player)
this.items.add(t.sprite)}))}createWalls(){this.wallData.forEach((e=>{let t=this.scene.add.rectangle(e.x,e.y,e.width,e.height,e.color)
t.name=e.name||"",this.scene.physics.add.existing(t,!0),this.walls.add(t)}))}createPlatforms(){this.platformData.forEach((e=>{let t=this.scene.add.graphics()
t.fillStyle(e.color,1),t.fillRoundedRect(0,0,e.width,e.height,10)
let s="platform_"+e.x+"_"+e.y
t.generateTexture(s,e.width,e.height),t.destroy()
let i=this.scene.add.image(e.x,e.y,s).setOrigin(.5,.5)
this.scene.physics.add.existing(i,!0),this.platforms.add(i),i.body.setSize(e.width,e.height)}))}createSpikes(){this.spikeData.forEach((e=>{const t=e.width,s=t/e.tines,i=s/2
for(let o=0;o<e.tines;o++){let n=e.x-t/2+o*s+s/2+i,r=e.y+e.height/2,a=this.scene.add.triangle(n,r,-s/2,e.height/2,0,-e.height/2,s/2,e.height/2,e.color)
this.scene.physics.add.existing(a,!0),this.spikes.add(a),a.body.setOffset(-i,0)}}))}update(e,t){this.enemies.children.iterate((s=>{const i=s.getData("instance")
i&&i.update(e,t)}))}destroy(){this.walls.clear(!0,!0),this.platforms.clear(!0,!0),this.spikes.clear(!0,!0),this.stars.clear(!0,!0)}}const b="\nw - wall or floor\nP - platform (can jump up through)\ns - spikes (facing up)\nE - flying enemy\ne - walking enemy\nh - health pickup\nH - bigger health pickup\n. - empty space\n---\n........................................\n........................................\n..........E..........e..................\n........................E...............\n.........ppp.........E..................\n......................h.................\n..H..................wwww...............\nwwww....................................\n..................e.....................\n...........h.H..........................\n.........ppppppp........................\n.......................wwwwww...........\n........................................\n........................................\n......................w.w...............\nss....................sss...............\nwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww\nwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww\n".trim().split("\n")
class f extends w{static defaultStarFactor=1
constructor(e,t,s,i,o=1,n){super(e,t,{asciiMap:localStorage.level1?JSON.parse(localStorage.level1).trim().replaceAll("\n\n","\n").split("\n"):b,spikeTines:3,sideScroll:2}),this.difficultySettings=s,this.levelNumber=i,this.levelIndexInType=o
const r=this.difficultySettings.getStarLevelOptions(o)
this.starIncreasePerLevel=r.starIncreasePerLevel,this.starFactor=f.defaultStarFactor+(this.levelIndexInType-1)*this.starIncreasePerLevel,this.createStars(),e.physics.add.collider(this.stars,this.walls,this.starWallCollision,null,this),e.physics.add.collider(this.stars,this.platforms),e.physics.add.collider(this.stars,this.spikes),e.physics.add.collider(this.stars,this.stars),this.scene.physics.add.overlap(this.stars,n.sprite,this.collectStar,null,this),this.player=n}createStars(){let e=this.starFactor
for(let t=0;t<e;t++){let e=s.Math.Between(50,750),t=s.Math.Between(50,300),i=this.scene.add.circle(e,t,7,16776960)
this.scene.physics.add.existing(i),this.stars.add(i),i.body.setBounce(this.kinematics.defaultItemBounce.x,this.kinematics.defaultItemBounce.y),i.body.setCollideWorldBounds(!0),i.body.setVelocity(s.Math.Between(-100,100),s.Math.Between(-100,100))}this.totalStars=e}starWallCollision(e,t){e.body.velocity.x*=.9,e.body.velocity.y*=.9,"ground"==t.name&&(e.body.velocity.x*=.5,e.body.velocity.y*=.5)}collectStar(e,t){t.destroy(),this.player.score+=10,0===this.stars.countActive(!0)&&this.scene.levelComplete()}}class v extends w{constructor(e,t,s,i,o=1,n){super(e,t,s.getFloatingStarLevelOptions(o)),this.difficultySettings=s,this.levelNumber=i,this.levelIndexInType=o,this.numberOfStars=this.levelIndexInType,this.createStars(),this.scene.physics.add.overlap(this.stars,n.sprite,this.collectStar,null,this),this.player=n}createStars(){for(let e=0;e<this.numberOfStars;e++){let e=s.Math.Between(50,750),t=s.Math.Between(50,300),i=this.scene.add.circle(e,t,7,16776960)
this.scene.physics.add.existing(i),this.stars.add(i),i.body.setAllowGravity(!1),i.body.setImmovable(!0),Math.random()>.5?this.addHoverAnimation(i):this.addRotateAnimation(i)}this.totalStars=this.numberOfStars}addHoverAnimation(e){let t=s.Math.Between(20,50),i=s.Math.Between(2e3,4e3)
this.scene.tweens.add({targets:e,y:e.y+t,yoyo:!0,repeat:-1,ease:"Sine.easeInOut",duration:i})}addRotateAnimation(e){let t=e.x,i=e.y,o=s.Math.Between(20,50),n=0,r=s.Math.FloatBetween(.01,.03)
this.scene.events.on("update",(()=>{n+=r,e.x=t+o*Math.cos(n),e.y=i+o*Math.sin(n)}))}collectStar(e,t){t.destroy(),this.player.score+=10,0===this.stars.countActive(!0)&&this.scene.levelComplete()}}class x extends w{constructor(e,t,s,i,o=1,n){super(e,t),this.player=n,this.difficultySettings=s,this.levelNumber=i,this.levelIndexInType=o
const r=this.difficultySettings.getBallLevelOptions(o)
this.numberOfBalls=r.numberOfBalls,this.elasticity=r.elasticity,this.createBalls(),this.createWinCondition(),e.physics.add.collider(this.stars,this.walls),e.physics.add.collider(this.stars,this.platforms),e.physics.add.collider(this.stars,this.spikes),e.physics.add.collider(this.stars,this.stars),e.physics.add.collider(this.stars,n.sprite)}createBalls(){for(let e=0;e<this.numberOfBalls;e++){let e=s.Math.Between(50,750),t=s.Math.Between(50,300),i=this.scene.add.circle(e,t,10,255)
this.scene.physics.add.existing(i),this.stars.add(i),i.body.setBounce(this.elasticity),i.body.setCollideWorldBounds(!0),i.body.setVelocity(s.Math.Between(-200,200),s.Math.Between(-200,200))}}createWinCondition(){this.winObject=this.scene.add.triangle(400,50,0,60,60,60,30,0,16776960),this.scene.physics.add.existing(this.winObject),this.winObject.body.allowGravity=!1,this.winObject.body.setCollideWorldBounds(!0),this.winObject.body.setImmovable(!0),this.winObject.body.setVelocityX(100),this.winObject.body.setBounce(1,0),this.scene.physics.add.overlap(this.winObject,this.player.sprite,(()=>{this.scene.levelComplete()}))}update(){}}class S{constructor(e,t){this.player=e,this.kinematics=t,this._totalWeight=this.player.inventory.totalWeight,this.baseSpeed=160,this.baseJumpSpeed=this.kinematics.jumpSpeed,this.updateMovementFactors()}get totalWeight(){return this._totalWeight}set totalWeight(e){this._totalWeight!==e&&(this._totalWeight=e,this.updateMovementFactors())}updateMovementFactors(){let e=1-this.totalWeight*this.kinematics.weightSlowFactor
e=s.Math.Clamp(e,this.kinematics.minPlayerSpeed,this.kinematics.maxPlayerSpeed),this._currentSpeed=this.baseSpeed*e
let t=1-this.totalWeight*this.kinematics.weightJumpFactor
t=s.Math.Clamp(t,this.kinematics.minPlayerJumpSpeed,this.kinematics.maxPlayerJumpSpeed),this._currentJumpSpeed=this.baseJumpSpeed*t}get currentSpeed(){return this._currentSpeed}get currentJumpSpeed(){return this._currentJumpSpeed}updateTotalWeight(){let e=this.player.inventory.totalWeight
this.totalWeight=e}}class I{constructor(e,t,s,i,o){this.scene=e,this.x=t,this.y=s,this.direction=i,this.type=o,this.sprite=e.physics.add.image(this.x,this.y,this.type.textureKey),this.sprite.setScale(1),this.sprite.body.allowGravity=!1,this.sprite.body.setCollideWorldBounds(!1)}init(){let e=this.type.speed
"left"===this.direction?this.sprite.setVelocityX(-e):this.sprite.setVelocityX(e),this.scene.time.delayedCall(1e3,(()=>{this.sprite.destroy()}))}}class k{static defaultMaxHearts=4
constructor(e,t=100,s=450,i={},o,n,r){this.scene=e,this.x=t,this.y=s,this.kinematics=o,this.projectileType=n,this.difficultySettings=r,this.color=void 0===i.playerColor?16711680:i.playerColor,this.maxHearts=i.maxHearts||k.defaultMaxHearts,this.hearts=this.maxHearts,this.recoilTimer=400,this.invulnerable=!1,this.inventory=new d,this.score=0,this.sprite=e.add.rectangle(this.x,this.y,32,48,this.color),e.physics.add.existing(this.sprite),this.sprite.body.setCollideWorldBounds(!0),this.sprite.body.setGravityY(this.kinematics.gravityY),this.facing="right",this.lastFired=0,this.isJumping=!1,this.jumpTime=0,this.movementFactors=new S(this,this.kinematics),this.projectiles=e.physics.add.group(),this.heartsGroup=e.add.group(),this.createHeartsDisplay(),this.scoreText=e.add.text(20,50,"Score: 0",{fontSize:"16px",fill:"#000"}),this.currentUIScrollFactor=0,this.setUIScrollFactor(0)}setUIScrollFactor(e=0){this.currentUIScrollFactor=e,this.scoreText.setScrollFactor(e),this.heartsGroup.children.each((t=>{t.setScrollFactor(e)}))}createHeartsDisplay(){this.heartsGroup.clear(!0,!0)
const e=16711680
let t,s,i
for(t=0;t<this.maxHearts;t++){s=20+20*t,i=20
const o=t<Math.floor(this.hearts)?e:8421504,n=this.scene.add.rectangle(s,20,16,16,o)
if(n.setScrollFactor(this.currentUIScrollFactor),this.heartsGroup.add(n),t<this.hearts){const t=this.scene.add.rectangle(s-4,20,8,16,e)
t.setScrollFactor(this.currentUIScrollFactor),this.heartsGroup.add(t)}}}platformCollisionCallback(e,t){return e.body.velocity.y>0&&!this.scene.inputManager.isDownPressed()}addHealth(e){this.hearts+=e,this.hearts>this.maxHearts&&(this.hearts=this.maxHearts),this.createHeartsDisplay()}update(e,t,s){this.movementFactors.updateTotalWeight()
let i=this.movementFactors.currentSpeed,o=this.movementFactors.currentJumpSpeed
this.sprite.body.setVelocityX(0),e.isLeftPressed()?(this.sprite.body.setVelocityX(-i),this.facing="left"):e.isRightPressed()&&(this.sprite.body.setVelocityX(i),this.facing="right")
const n=this.sprite.body.blocked.down||this.sprite.body.touching.down
e.isUpPressed()||e.isSpacePressed()?n?(this.isJumping=!0,this.jumpTime=0,this.sprite.body.setVelocityY(o)):this.isJumping&&this.jumpTime<this.kinematics.maxJumpTime?(this.sprite.body.setVelocityY(o),this.jumpTime+=this.scene.game.loop.delta):this.isJumping=!1:this.isJumping=!1,e.isDownPressed()&&!n?this.sprite.body.setGravityY(4*this.kinematics.gravityY):this.sprite.body.setGravityY(this.kinematics.gravityY),e.isShiftPressed()&&s-this.lastFired>this.projectileType.cooldown&&(this.fireProjectile(),this.lastFired=s),this.scoreText.setText("Score: "+this.score)}fireProjectile(){let e=this.sprite.x,t=this.sprite.y,s=new I(this.scene,e,t,this.facing,this.projectileType)
this.projectiles.add(s.sprite),s.init()
let i=s.type.recoilForce
i-=this.inventory.totalWeight,i=Math.max(i,0),"left"===this.facing?this.sprite.body.velocity.x+=i:this.sprite.body.velocity.x-=i}takeDamage(e,t,s=this.difficultySettings.spikeDamage){if(!this.invulnerable){if(this.invulnerable=!0,this.hearts-=s,this.hearts<0&&(this.hearts=0),this.createHeartsDisplay(),this._damageRecoil(e,t,s),this.scene.time.delayedCall(this.recoilTimer,(()=>{this.invulnerable=!1})),!this.flashTween){const t=4
this.flashTween=this.scene.tweens.add({targets:e,duration:this.recoilTimer/t/2-10,alpha:.25,ease:"Linear",yoyo:!0,repeat:t-1,onComplete:()=>{e.alpha=1,this.flashTween=null}})}this.hearts<=0&&this.scene.scene.start("GameOverScene")}}_damageRecoil(e,t,i){const o=new s.Math.Vector2(e.x-t.x,-Math.abs(e.y-t.y)).normalize(),n=i/this.maxHearts*k.defaultMaxHearts*200,r=i/this.maxHearts*k.defaultMaxHearts*100
e.useVelocity?(e.body.touching.left?e.body.velocity.x=n:e.body.touching.right&&(e.body.velocity.x=-n),e.body.velocity.y=-r):(e.body.velocity.x=o.x*n,e.body.velocity.y=o.y*r)}destroy(){this.sprite.destroy(),this.projectiles.clear(!0,!0),this.heartsGroup.clear(!0,!0),this.scoreText.destroy()}}const C=(e,t)=>{if(e===t)return
console.log(`Title updated from: ${t}`),console.log(`Title updated to: ${e}`)
const s=new CustomEvent("update-title",{detail:{newTitle:e,oldTitle:t}})
document.dispatchEvent(s)}
class T{myId=void 0
container=void 0
constructor(e="Floating Window From Class ",t=document.createElement("div"),s={width:200,height:200,top:50,left:50},i=C){if(this.title=e,this.contentElement=t,this.startDimensions=s,this.onTitleChange=i,this.myId=e.toLowerCase().replace(/\s/g,"-"),i&&(i(this.myId,this.myId),t&&(t.id=this.myId)),document.getElementById(this.myId))throw new Error(`Element with ID '${this.myId}' already exists!`)
this.createMainContainer({title:e,rootElement:document.body,startDimensions:s,contentElement:t,onTitleChange:i})}recreate(e,t,s,i=null){const o={...this.startDimensions,top:e,left:t},n=s||this.contentElement
this.createMainContainer({title:i||this.title,rootElement:document.body,startDimensions:o,contentElement:n,onTitleChange:this.onTitleChange})}createMainContainer({title:e,rootElement:t,startDimensions:s,contentElement:i,onTitleChange:o}){this.container=document.createElement("div"),Object.assign(this.container.style,{position:"absolute",width:`${s.width}px`,height:`${s.height}px`,top:`${s.top}px`,left:`${s.left}px`,border:"1px solid black",boxShadow:"0 4px 8px rgba(0,0,0,0.2)",backgroundColor:"rgba(255, 255, 255, 0.9)",resize:"both",overflow:"hidden"}),t.appendChild(this.container)
const n=document.createElement("div")
Object.assign(n.style,{background:"#333",color:"#fff",padding:"5px",cursor:"move",display:"flex",justifyContent:"space-between",alignItems:"center"}),this.container.appendChild(n)
const r=document.createElement("span")
r.textContent=e,r.contentEditable=!1,r.style.outline="none",r.style.flexGrow="1",n.appendChild(r),o&&(r.addEventListener("dblclick",(()=>{r.style.cursor="text",r.contentEditable=!0,r.focus()})),r.addEventListener("blur",(()=>{r.style.cursor="move",r.contentEditable=!1,this.myId=r.textContent.toLowerCase().replace(/\s/g,"-"),o?(o(this.myId,i.id),i.id=this.myId):i.id=this.myId})),r.addEventListener("keydown",(t=>{"Enter"===t.key&&r.blur(),"Escape"===t.key&&(r.textContent=e,r.blur())})))
const a=document.createElement("div");["-","X"].forEach((e=>{const t=document.createElement("button")
t.textContent=e,Object.assign(t.style,{background:"X"===e?"#d00":"#555",color:"#fff",border:"none",cursor:"pointer",padding:"2px 6px",marginLeft:"5px"}),a.appendChild(t),t.addEventListener("click",(()=>{"-"===e?(this.container.classList.toggle("minimized"),this.container.style.height=this.container.classList.contains("minimized")?"30px":`${s.height}px`,i.style.display=this.container.classList.contains("minimized")?"none":"block"):this.container.remove()}))})),n.appendChild(a),i||((i=document.createElement("canvas")).id=this.myId,i.width=s.width,i.height=s.height-30,i.style.display="block",this.contentElement=i),this.container.appendChild(i)
let h,l,c=!1
n.addEventListener("mousedown",(e=>{c=!0,h=e.clientX-this.container.offsetLeft,l=e.clientY-this.container.offsetTop})),document.addEventListener("mousemove",(e=>{c&&(this.container.style.left=e.clientX-h+"px",this.container.style.top=e.clientY-l+"px")})),document.addEventListener("mouseup",(()=>{c=!1}))}}document.addEventListener("update-title",(e=>{console.log(`pi.html received title update: ${e.detail.newTitle}`)
const{newTitle:t,oldTitle:s}=e.detail,i=droppedFiles||[],o=`const title = '${t.replace(/-/g," ")}';`,n=i.find((e=>e.content.trim().startsWith("const title = ")&&e.content.toLowerCase().includes(s.replace(/-/g," "))))
if(n){const e=n.content.split("\n")
e[0]=o,n.content=e.join("\n"),n.name=`${t}.js`,console.log(`Updated title in file: ${n.name}`),updateFileList()}else console.warn("No file found with a title line to update.")}))
class D extends s.Scene{constructor(){super({key:"MainScene"}),this.debugMode=!1,this.isPaused=!1}init(e){this.currentLevel=e.level||1,this.gameMode=e.gameMode||"easy",this.game.registry.set("gameMode",this.gameMode),this.events.on("shutdown",(()=>{this.debugGraphics&&(this.debugGraphics.clear(),this.debugGraphics.destroy(),this.debugGraphics=null)}))}preload(){}create(){this.cameras.main.setBackgroundColor("#87CEEB"),this.difficultySettings=new h,this.kinematics=new l(this.currentLevel),this.projectileType=new c(this,{size:{width:10,height:10},shape:"triangle",speed:500,color:16776960,cooldown:200,recoilForce:100})
let e=this.game.registry.get("playerColor")
if(e=void 0===e?16711680:e,this.player=new k(this,100,450,{maxHearts:4,playerColor:e},this.kinematics,this.projectileType,this.difficultySettings),this.inputManager=new a(this),this.levelProgression=this.difficultySettings.game.getProgression(this.gameMode),this.currentLevel<=this.levelProgression.length){{const e=this.levelProgression[this.currentLevel-1]
let t
switch(e.levelType){case"StarLevel":default:t=f
break
case"FloatingStarLevel":t=v
break
case"BallLevel":t=x}const s=e.levelIndexInType
this.level=new t(this,this.kinematics,this.difficultySettings,this.currentLevel,s,this.player)}if(this.levelText=this.add.text(this.cameras.main.width/2,this.cameras.main.height/2,"Level "+this.currentLevel,{fontSize:"64px",fill:"#fff"}).setOrigin(.5),this.time.delayedCall(1500,(()=>{this.levelText.destroy()}),[],this),this.physics.add.collider(this.level.stars,this.player.projectiles),this.physics.add.collider(this.player.sprite,this.level.walls),this.physics.add.collider(this.player.sprite,this.level.platforms,null,this.player.platformCollisionCallback,this.player),this.physics.add.overlap(this.player.sprite,this.level.spikes,this.player.takeDamage,null,this.player),localStorage.debug){const e=this.game.renderer instanceof s.Renderer.WebGL.WebGLRenderer?"WebGL":"Canvas"
this.add.text(localStorage.width||635,10,`Renderer: ${e}`,{fontSize:"16px",fill:"#eee"}).setScrollFactor(0)}}else this.scene.start("CongratulationsScene",{totalScore:this.player?this.player.score:0})}update(e,t){const i=s.Input.Keyboard.JustDown(this.inputManager.pauseKey),o=s.Input.Keyboard.JustDown(this.inputManager.debugKey)
i&&(this.isPaused=!this.isPaused),o&&(this.debugMode=!this.debugMode,this.isPaused=!0,this.debugMode?(this.debugGraphics||=this.add.graphics(),this.debugGraphics.lineStyle(2,16711680),this.cameras.main.setZoom(.5),this.debugCameraX=this.cameras.main.scrollX,this.debugCameraY=this.cameras.main.scrollY,this.player.setUIScrollFactor(1),this.player.scene.cameras.main.stopFollow(),this.level.enemies.children.iterate(((e,t)=>{e.setInteractive(),e.on("pointerdown",(t=>{this.openDebugWindow(t,e.getData("instance"))})),e.on("pointerover",(()=>{this.debugGraphics.clear()
const t=e.getBounds()
this.debugGraphics.strokeRectShape(t)})),e.on("pointerout",(()=>{this.debugGraphics.clear()}))}))):(this.cameras.main.setZoom(1),this.cameras.main.setScroll(this.debugCameraX,this.debugCameraY),this.player.setUIScrollFactor(0),this.player.scene.cameras.main.startFollow(this.player.sprite),this.debugGraphics&&this.debugGraphics.clear(),this.level.enemies.children.iterate((e=>{e.removeAllListeners("pointerover"),e.removeAllListeners("pointerout"),e.removeAllListeners("pointerdown"),e.disableInteractive()})),this.floatingWindow&&(this.floatingWindow.container.remove(),this.floatingWindow=null,this.level.enemies.children.iterate((e=>{e.getData("instance").removeDebugContent()}))))),(i||o)&&(this.isPaused?this.physics.world.pause():this.physics.world.resume(),this.changeFloatingWindowOpacity()),this.debugMode&&this.isPaused?this.handleDebugCamera(e,t):this.handleGameplay(e,t)}changeFloatingWindowOpacity(){this.floatingWindow&&(this.debugMode&&!this.isPaused?this.floatingWindow.container.style.opacity="0.7":this.floatingWindow.container.style.opacity="1.0")}handleGameplay(e,t){this.player.update(this.inputManager,null,e),this.level.update&&this.level.update(e,t)}openDebugWindow(e,t){const s=e.event.clientY,i=e.event.clientX+10,o=t.createDebugContent(),n=`Debug Enemy #${t.props.id}`
this.floatingWindow||=new T(n,o,{width:640,height:350,top:s,left:i},null),this.floatingWindow.container.parentElement&&this.floatingWindow.container.remove(),this.floatingWindow.recreate(s,i,o,n),o.addEventListener("keydown",(e=>{e.stopPropagation()}))
const r=e=>{(["INPUT","LABEL"].includes(e.target.tagName)||this.debugMode&&this.isPaused)&&e.stopPropagation()}
o.addEventListener("mousedown",r),o.addEventListener("mouseup",r),this.changeFloatingWindowOpacity(),document.addEventListener("mousedown",(e=>{const t=document.activeElement
t&&"INPUT"===t.tagName&&!e.target.closest("input")&&t.blur()}))}handleDebugCamera(e,t){const s=t/1e3*1e3,i=this.cameras.main
this.inputManager.isLeftPressed()&&(i.scrollX-=s),this.inputManager.isRightPressed()&&(i.scrollX+=s),this.inputManager.isUpPressed()&&(i.scrollY-=s),this.inputManager.isDownPressed()&&(i.scrollY+=s)}levelComplete(){this.currentLevel+=1,this.game.registry.set("lastLevel",this.currentLevel),this.scene.restart({level:this.currentLevel,gameMode:this.gameMode})}}class O extends s.Scene{constructor(){super({key:"GameOverScene"})}create(){this.selectedOptionIndex=0,this.options=["Title Screen","Retry","Restart"],this.optionButtons=[],this.defaultTextStyle={fontSize:"32px",fill:"#888"},this.highlightedTextStyle={fontSize:"32px",fill:"#fff"},this.cameras.main.setBackgroundColor("#000000"),this.add.text(400,150,"Game Over",{fontSize:"64px",fill:"#a0f"}).setOrigin(.5)
this.options.forEach(((e,t)=>{let s=this.add.text(400,300+50*t,e,this.defaultTextStyle).setOrigin(.5).setInteractive()
s.on("pointerdown",(()=>{this.selectedOptionIndex=t,this.startSelectedOption()})),s.on("pointerover",(()=>{this.selectedOptionIndex=t,this.updateOptionStyles()})),this.optionButtons.push(s)})),this.cursors=this.input.keyboard.createCursorKeys(),this.enterKey=this.input.keyboard.addKey(s.Input.Keyboard.KeyCodes.ENTER),this.updateOptionStyles(),this.events.on("shutdown",this.shutdown,this)}update(){s.Input.Keyboard.JustDown(this.cursors.up)?(this.selectedOptionIndex=(this.selectedOptionIndex+this.options.length-1)%this.options.length,this.updateOptionStyles()):s.Input.Keyboard.JustDown(this.cursors.down)?(this.selectedOptionIndex=(this.selectedOptionIndex+1)%this.options.length,this.updateOptionStyles()):s.Input.Keyboard.JustDown(this.enterKey)&&this.startSelectedOption()}updateOptionStyles(){this.optionButtons.forEach(((e,t)=>{t===this.selectedOptionIndex?e.setStyle(this.highlightedTextStyle):e.setStyle(this.defaultTextStyle)}))}startSelectedOption(){switch(this.selectedOptionIndex){case 0:this.scene.start("TitleScene")
break
case 1:this.scene.start("MainScene",{level:this.game.registry.get("lastLevel")||1,gameMode:this.game.registry.get("gameMode")})
break
case 2:this.scene.start("MainScene",{level:1,gameMode:this.game.registry.get("gameMode")})}}shutdown(){this.input.keyboard.shutdown(),this.events.off("shutdown",this.shutdown,this)}}class P extends s.Scene{constructor(){super({key:"CongratulationsScene"})}init(e){this.totalScore=e.totalScore||0}create(){this.cameras.main.setBackgroundColor("#000000"),this.add.text(400,200,"Congratulations!",{fontSize:"64px",fill:"#fff"}).setOrigin(.5),this.add.text(400,300,"Total Score: "+this.totalScore,{fontSize:"32px",fill:"#fff"}).setOrigin(.5),this.add.text(400,400,"Play Again",{fontSize:"32px",fill:"#fff",backgroundColor:"#00ff00"}).setOrigin(.5).setInteractive().on("pointerdown",(()=>{this.scene.start("MainScene",{level:1,gameMode:"easy"})}))}}const E={type:localStorage.useCanvas?s.CANVAS:s.AUTO,scale:{mode:s.Scale.FIT},width:localStorage.width||800,height:localStorage.height||600,physics:{default:"arcade",arcade:{gravity:{y:localStorage.gravity||300},debug:!1}},scene:[i,o,D,O,P]},M=new s.Game(E),L=()=>{setTimeout((()=>{M.scale.setParentSize(window.innerWidth,window.innerHeight)}),100)}
return L(),window.addEventListener("orientationchange",(()=>{L()})),M.scene.start("TitleScene"),M}(Phaser)
//# sourceMappingURL=boxadon.min.js.map
